// Parenting Helper App - Prisma Schema
// Converted from database/schema.sql
// PostgreSQL 15+ with UUID support

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USERS & AUTHENTICATION
// ============================================================================

model User {
  userId                String    @id @default(uuid()) @map("user_id") @db.Uuid
  email                 String    @unique @db.VarChar(255)
  kindeId               String    @unique @map("kinde_id") @db.VarChar(255)
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  isSubscribed          Boolean   @default(false) @map("is_subscribed")
  subscriptionId        String?   @map("subscription_id") @db.VarChar(255)
  subscriptionStartDate DateTime? @map("subscription_start_date") @db.Timestamp(6)
  subscriptionEndDate   DateTime? @map("subscription_end_date") @db.Timestamp(6)
  storageLimitGb        Int       @default(0) @map("storage_limit_gb")
  storageUsedBytes      BigInt    @default(0) @map("storage_used_bytes")
  lastLogin             DateTime? @map("last_login") @db.Timestamp(6)

  // Relations
  groupMemberships GroupMember[]
  createdGroups    Group[]        @relation("GroupCreator")
  storageUsage     StorageUsage[]
  pinnedItems      PinnedItem[]

  @@index([email])
  @@index([kindeId])
  @@map("users")
}

// ============================================================================
// GROUPS & MEMBERS
// ============================================================================

model Group {
  groupId            String   @id @default(uuid()) @map("group_id") @db.Uuid
  name               String   @db.VarChar(255)
  icon               String?  @db.VarChar(255)
  backgroundImageUrl String?  @map("background_image_url") @db.Text
  backgroundColor    String?  @map("background_color") @db.VarChar(7)
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  isHidden           Boolean  @default(false) @map("is_hidden")
  dateFormat         String   @default("MM/DD/YYYY") @map("date_format") @db.VarChar(50)
  currency           String   @default("USD") @db.VarChar(3)

  // Trial restrictions
  createdByTrialUser Boolean @default(false) @map("created_by_trial_user")
  createdByUserId    String? @map("created_by_user_id") @db.Uuid

  // Relations
  createdBy        User?             @relation("GroupCreator", fields: [createdByUserId], references: [userId])
  members          GroupMember[]
  settings         GroupSettings?
  messageGroups    MessageGroup[]
  calendarEvents   CalendarEvent[]
  financeMatters   FinanceMatter[]
  approvals        Approval[]
  auditLogs        AuditLog[]
  relationships    Relationship[]
  adminPermissions AdminPermission[]
  storageUsage     StorageUsage[]

  @@index([createdAt])
  @@map("groups")
}

model GroupMember {
  groupMemberId String   @id @default(uuid()) @map("group_member_id") @db.Uuid
  groupId       String   @map("group_id") @db.Uuid
  userId        String?  @map("user_id") @db.Uuid
  role          String   @db.VarChar(50)
  displayName   String   @map("display_name") @db.VarChar(255)
  iconLetters   String   @map("icon_letters") @db.VarChar(3)
  iconColor     String   @map("icon_color") @db.VarChar(7)
  email         String?  @db.VarChar(255)
  isRegistered  Boolean  @default(false) @map("is_registered")
  joinedAt      DateTime @default(now()) @map("joined_at") @db.Timestamp(6)
  isMuted       Boolean  @default(false) @map("is_muted")

  // Notification preferences
  notifyRequests        Boolean @default(true) @map("notify_requests")
  notifyAllMessages     Boolean @default(true) @map("notify_all_messages")
  notifyMentionMessages Boolean @default(true) @map("notify_mention_messages")
  notifyAllCalendar     Boolean @default(true) @map("notify_all_calendar")
  notifyMentionCalendar Boolean @default(true) @map("notify_mention_calendar")
  notifyAllFinance      Boolean @default(true) @map("notify_all_finance")
  notifyMentionFinance  Boolean @default(true) @map("notify_mention_finance")

  // Relations
  group Group @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  user  User? @relation(fields: [userId], references: [userId], onDelete: SetNull)

  createdMessageGroups    MessageGroup[]       @relation("MessageGroupCreator")
  messageGroupMemberships MessageGroupMember[]
  sentMessages            Message[]            @relation("MessageSender")
  hiddenMessages          Message[]            @relation("MessageHider")
  messageReadReceipts     MessageReadReceipt[]

  createdEvents         CalendarEvent[]            @relation("EventCreator")
  eventAttendances      EventAttendee[]
  childResponsibilities ChildResponsibilityEvent[] @relation("ResponsibleChild")
  startResponsibilities ChildResponsibilityEvent[] @relation("StartResponsibleMember")
  endResponsibilities   ChildResponsibilityEvent[] @relation("EndResponsibleMember")

  createdFinanceMatters    FinanceMatter[]       @relation("FinanceMatterCreator")
  settledFinanceMatters    FinanceMatter[]       @relation("FinanceMatterSettler")
  financeMatterMemberships FinanceMatterMember[]
  paymentsFrom             FinancePayment[]      @relation("PaymentFrom")
  paymentsTo               FinancePayment[]      @relation("PaymentTo")

  requestedApprovals Approval[]     @relation("ApprovalRequester")
  approvalVotes      ApprovalVote[]

  auditLogsPerformed AuditLog[]

  relationshipsAsMember1 Relationship[] @relation("Member1")
  relationshipsAsMember2 Relationship[] @relation("Member2")

  grantedPermissions  AdminPermission[] @relation("GrantingAdmin")
  receivedPermissions AdminPermission[] @relation("ReceivingAdmin")

  @@unique([groupId, userId])
  @@index([groupId])
  @@index([userId])
  @@index([groupId, role])
  @@map("group_members")
}

model Relationship {
  relationshipId   String   @id @default(uuid()) @map("relationship_id") @db.Uuid
  groupId          String   @map("group_id") @db.Uuid
  memberId1        String   @map("member_id_1") @db.Uuid
  memberId2        String   @map("member_id_2") @db.Uuid
  relationshipType String   @map("relationship_type") @db.VarChar(100)
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  // Relations
  group   Group       @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  member1 GroupMember @relation("Member1", fields: [memberId1], references: [groupMemberId])
  member2 GroupMember @relation("Member2", fields: [memberId2], references: [groupMemberId])

  @@unique([groupId, memberId1, memberId2])
  @@index([groupId])
  @@map("relationships")
}

model GroupSettings {
  groupId                       String   @id @map("group_id") @db.Uuid
  parentsCreateMessageGroups    Boolean  @default(true) @map("parents_create_message_groups")
  childrenCreateMessageGroups   Boolean  @default(false) @map("children_create_message_groups")
  caregiversCreateMessageGroups Boolean  @default(true) @map("caregivers_create_message_groups")
  financeVisibleToParents       Boolean  @default(true) @map("finance_visible_to_parents")
  financeCreatableByParents     Boolean  @default(true) @map("finance_creatable_by_parents")
  financeVisibleToCaregivers    Boolean  @default(false) @map("finance_visible_to_caregivers")
  financeCreatableByCaregivers  Boolean  @default(false) @map("finance_creatable_by_caregivers")
  financeVisibleToChildren      Boolean  @default(false) @map("finance_visible_to_children")
  financeCreatableByChildren    Boolean  @default(false) @map("finance_creatable_by_children")
  updatedAt                     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  group Group @relation(fields: [groupId], references: [groupId], onDelete: Cascade)

  @@map("group_settings")
}

model AdminPermission {
  permissionId     String @id @default(uuid()) @map("permission_id") @db.Uuid
  groupId          String @map("group_id") @db.Uuid
  grantingAdminId  String @map("granting_admin_id") @db.Uuid
  receivingAdminId String @map("receiving_admin_id") @db.Uuid

  autoApproveHideMessages             Boolean @default(false) @map("auto_approve_hide_messages")
  autoApproveAddPeople                Boolean @default(false) @map("auto_approve_add_people")
  autoApproveRemovePeople             Boolean @default(false) @map("auto_approve_remove_people")
  autoApproveAssignRoles              Boolean @default(false) @map("auto_approve_assign_roles")
  autoApproveChangeRoles              Boolean @default(false) @map("auto_approve_change_roles")
  autoApproveAssignRelationships      Boolean @default(false) @map("auto_approve_assign_relationships")
  autoApproveChangeRelationships      Boolean @default(false) @map("auto_approve_change_relationships")
  autoApproveCalendarEntries          Boolean @default(false) @map("auto_approve_calendar_entries")
  autoApproveAssignChildrenToEvents   Boolean @default(false) @map("auto_approve_assign_children_to_events")
  autoApproveAssignCaregiversToEvents Boolean @default(false) @map("auto_approve_assign_caregivers_to_events")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  group          Group       @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  grantingAdmin  GroupMember @relation("GrantingAdmin", fields: [grantingAdminId], references: [groupMemberId])
  receivingAdmin GroupMember @relation("ReceivingAdmin", fields: [receivingAdminId], references: [groupMemberId])

  @@unique([groupId, grantingAdminId, receivingAdminId])
  @@map("admin_permissions")
}

// ============================================================================
// MESSAGING
// ============================================================================

model MessageGroup {
  messageGroupId String    @id @default(uuid()) @map("message_group_id") @db.Uuid
  groupId        String    @map("group_id") @db.Uuid
  name           String    @db.VarChar(255)
  createdBy      String    @map("created_by") @db.Uuid
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  lastMessageAt  DateTime? @map("last_message_at") @db.Timestamp(6)

  // Relations
  group    Group                @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  creator  GroupMember          @relation("MessageGroupCreator", fields: [createdBy], references: [groupMemberId])
  members  MessageGroupMember[]
  messages Message[]

  @@index([groupId])
  @@index([lastMessageAt])
  @@map("message_groups")
}

model MessageGroupMember {
  messageGroupId String    @map("message_group_id") @db.Uuid
  groupMemberId  String    @map("group_member_id") @db.Uuid
  joinedAt       DateTime  @default(now()) @map("joined_at") @db.Timestamp(6)
  isPinned       Boolean   @default(false) @map("is_pinned")
  lastReadAt     DateTime? @map("last_read_at") @db.Timestamp(6)

  // Relations
  messageGroup MessageGroup @relation(fields: [messageGroupId], references: [messageGroupId], onDelete: Cascade)
  groupMember  GroupMember  @relation(fields: [groupMemberId], references: [groupMemberId])

  @@id([messageGroupId, groupMemberId])
  @@index([groupMemberId])
  @@map("message_group_members")
}

model Message {
  messageId      String    @id @default(uuid()) @map("message_id") @db.Uuid
  messageGroupId String    @map("message_group_id") @db.Uuid
  senderId       String    @map("sender_id") @db.Uuid
  content        String    @db.Text
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  editedAt       DateTime? @map("edited_at") @db.Timestamp(6)
  isHidden       Boolean   @default(false) @map("is_hidden")
  hiddenAt       DateTime? @map("hidden_at") @db.Timestamp(6)
  hiddenBy       String?   @map("hidden_by") @db.Uuid
  sentStatus     String    @default("pending") @map("sent_status") @db.VarChar(20)
  mentions       String[]  @db.Uuid

  // Relations
  messageGroup MessageGroup         @relation(fields: [messageGroupId], references: [messageGroupId], onDelete: Cascade)
  sender       GroupMember          @relation("MessageSender", fields: [senderId], references: [groupMemberId])
  hider        GroupMember?         @relation("MessageHider", fields: [hiddenBy], references: [groupMemberId])
  media        MessageMedia[]
  readReceipts MessageReadReceipt[]

  @@index([messageGroupId, createdAt(sort: Desc)])
  @@index([senderId])
  @@map("messages")
}

model MessageMedia {
  mediaId       String   @id @default(uuid()) @map("media_id") @db.Uuid
  messageId     String   @map("message_id") @db.Uuid
  mediaType     String   @map("media_type") @db.VarChar(20)
  s3Key         String   @map("s3_key") @db.VarChar(500)
  url           String   @db.Text
  thumbnailUrl  String?  @map("thumbnail_url") @db.Text
  fileSizeBytes BigInt   @map("file_size_bytes")
  uploadedAt    DateTime @default(now()) @map("uploaded_at") @db.Timestamp(6)

  // Relations
  message       Message        @relation(fields: [messageId], references: [messageId], onDelete: Cascade)
  mediaLogLinks MediaLogLink[]

  @@index([messageId])
  @@map("message_media")
}

model MessageReadReceipt {
  messageId     String   @map("message_id") @db.Uuid
  groupMemberId String   @map("group_member_id") @db.Uuid
  readAt        DateTime @default(now()) @map("read_at") @db.Timestamp(6)

  // Relations
  message     Message     @relation(fields: [messageId], references: [messageId], onDelete: Cascade)
  groupMember GroupMember @relation(fields: [groupMemberId], references: [groupMemberId])

  @@id([messageId, groupMemberId])
  @@index([groupMemberId])
  @@map("message_read_receipts")
}

// ============================================================================
// CALENDAR & CHILD RESPONSIBILITY
// ============================================================================

model CalendarEvent {
  eventId   String   @id @default(uuid()) @map("event_id") @db.Uuid
  groupId   String   @map("group_id") @db.Uuid
  title     String   @db.VarChar(255)
  startTime DateTime @map("start_time") @db.Timestamp(6)
  endTime   DateTime @map("end_time") @db.Timestamp(6)
  notes     String?  @db.Text
  createdBy String   @map("created_by") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Recurrence
  isRecurring        Boolean   @default(false) @map("is_recurring")
  recurrencePattern  String?   @map("recurrence_pattern") @db.VarChar(50)
  recurrenceInterval Int?      @map("recurrence_interval")
  recurrenceEndDate  DateTime? @map("recurrence_end_date") @db.Timestamp(6)
  parentEventId      String?   @map("parent_event_id") @db.Uuid

  // Event type
  isResponsibilityEvent Boolean @default(false) @map("is_responsibility_event")

  // Relations
  group                Group                      @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  creator              GroupMember                @relation("EventCreator", fields: [createdBy], references: [groupMemberId])
  parentEvent          CalendarEvent?             @relation("RecurringEvents", fields: [parentEventId], references: [eventId])
  childEvents          CalendarEvent[]            @relation("RecurringEvents")
  attendees            EventAttendee[]
  responsibilityEvents ChildResponsibilityEvent[]

  @@index([groupId])
  @@index([startTime, endTime])
  @@index([isRecurring, parentEventId])
  @@map("calendar_events")
}

model EventAttendee {
  eventId       String @map("event_id") @db.Uuid
  groupMemberId String @map("group_member_id") @db.Uuid

  // Relations
  event       CalendarEvent @relation(fields: [eventId], references: [eventId], onDelete: Cascade)
  groupMember GroupMember   @relation(fields: [groupMemberId], references: [groupMemberId])

  @@id([eventId, groupMemberId])
  @@index([groupMemberId])
  @@map("event_attendees")
}

model ChildResponsibilityEvent {
  responsibilityEventId String @id @default(uuid()) @map("responsibility_event_id") @db.Uuid
  eventId               String @map("event_id") @db.Uuid
  childId               String @map("child_id") @db.Uuid

  // Responsibility at start
  startResponsibilityType          String  @map("start_responsibility_type") @db.VarChar(20)
  startResponsibleMemberId         String? @map("start_responsible_member_id") @db.Uuid
  startResponsibleOtherName        String? @map("start_responsible_other_name") @db.VarChar(255)
  startResponsibleOtherIconLetters String? @map("start_responsible_other_icon_letters") @db.VarChar(3)
  startResponsibleOtherColor       String? @map("start_responsible_other_color") @db.VarChar(7)

  // Responsibility at end
  endResponsibilityType          String  @map("end_responsibility_type") @db.VarChar(20)
  endResponsibleMemberId         String? @map("end_responsible_member_id") @db.Uuid
  endResponsibleOtherName        String? @map("end_responsible_other_name") @db.VarChar(255)
  endResponsibleOtherIconLetters String? @map("end_responsible_other_icon_letters") @db.VarChar(3)
  endResponsibleOtherColor       String? @map("end_responsible_other_color") @db.VarChar(7)

  // Relations
  event                  CalendarEvent @relation(fields: [eventId], references: [eventId], onDelete: Cascade)
  child                  GroupMember   @relation("ResponsibleChild", fields: [childId], references: [groupMemberId])
  startResponsibleMember GroupMember?  @relation("StartResponsibleMember", fields: [startResponsibleMemberId], references: [groupMemberId])
  endResponsibleMember   GroupMember?  @relation("EndResponsibleMember", fields: [endResponsibleMemberId], references: [groupMemberId])

  @@index([eventId])
  @@index([childId])
  @@map("child_responsibility_events")
}

// ============================================================================
// FINANCE MATTERS
// ============================================================================

model FinanceMatter {
  financeMatterId String    @id @default(uuid()) @map("finance_matter_id") @db.Uuid
  groupId         String    @map("group_id") @db.Uuid
  name            String    @db.VarChar(255)
  description     String?   @db.Text
  totalAmount     Decimal   @map("total_amount") @db.Decimal(12, 2)
  currency        String    @db.VarChar(3)
  dueDate         DateTime? @map("due_date") @db.Timestamp(6)
  createdBy       String    @map("created_by") @db.Uuid
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  isSettled       Boolean   @default(false) @map("is_settled")
  settledAt       DateTime? @map("settled_at") @db.Timestamp(6)
  settledBy       String?   @map("settled_by") @db.Uuid

  // Relations
  group    Group                 @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  creator  GroupMember           @relation("FinanceMatterCreator", fields: [createdBy], references: [groupMemberId])
  settler  GroupMember?          @relation("FinanceMatterSettler", fields: [settledBy], references: [groupMemberId])
  members  FinanceMatterMember[]
  payments FinancePayment[]

  @@index([groupId])
  @@index([isSettled])
  @@map("finance_matters")
}

model FinanceMatterMember {
  financeMatterId    String  @map("finance_matter_id") @db.Uuid
  groupMemberId      String  @map("group_member_id") @db.Uuid
  expectedAmount     Decimal @map("expected_amount") @db.Decimal(12, 2)
  expectedPercentage Decimal @map("expected_percentage") @db.Decimal(5, 2)
  paidAmount         Decimal @default(0) @map("paid_amount") @db.Decimal(12, 2)

  // Relations
  financeMatter FinanceMatter @relation(fields: [financeMatterId], references: [financeMatterId], onDelete: Cascade)
  groupMember   GroupMember   @relation(fields: [groupMemberId], references: [groupMemberId])

  @@id([financeMatterId, groupMemberId])
  @@index([groupMemberId])
  @@map("finance_matter_members")
}

model FinancePayment {
  paymentId       String    @id @default(uuid()) @map("payment_id") @db.Uuid
  financeMatterId String    @map("finance_matter_id") @db.Uuid
  fromMemberId    String    @map("from_member_id") @db.Uuid
  toMemberId      String    @map("to_member_id") @db.Uuid
  amount          Decimal   @db.Decimal(12, 2)
  receiptImageUrl String?   @map("receipt_image_url") @db.Text
  reportedAt      DateTime  @default(now()) @map("reported_at") @db.Timestamp(6)
  confirmedAt     DateTime? @map("confirmed_at") @db.Timestamp(6)
  isConfirmed     Boolean   @default(false) @map("is_confirmed")

  // Relations
  financeMatter FinanceMatter @relation(fields: [financeMatterId], references: [financeMatterId], onDelete: Cascade)
  fromMember    GroupMember   @relation("PaymentFrom", fields: [fromMemberId], references: [groupMemberId])
  toMember      GroupMember   @relation("PaymentTo", fields: [toMemberId], references: [groupMemberId])

  @@index([financeMatterId])
  @@index([fromMemberId, toMemberId])
  @@map("finance_payments")
}

// ============================================================================
// APPROVALS & VOTING
// ============================================================================

model Approval {
  approvalId                 String    @id @default(uuid()) @map("approval_id") @db.Uuid
  groupId                    String    @map("group_id") @db.Uuid
  approvalType               String    @map("approval_type") @db.VarChar(50)
  requestedBy                String    @map("requested_by") @db.Uuid
  requestedAt                DateTime  @default(now()) @map("requested_at") @db.Timestamp(6)
  status                     String    @default("pending") @db.VarChar(20)
  completedAt                DateTime? @map("completed_at") @db.Timestamp(6)
  relatedEntityType          String?   @map("related_entity_type") @db.VarChar(50)
  relatedEntityId            String?   @map("related_entity_id") @db.Uuid
  approvalData               Json      @map("approval_data") @db.JsonB
  requiresAllAdmins          Boolean   @default(false) @map("requires_all_admins")
  requiredApprovalPercentage Decimal   @default(50.00) @map("required_approval_percentage") @db.Decimal(5, 2)

  // Relations
  group     Group          @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  requester GroupMember    @relation("ApprovalRequester", fields: [requestedBy], references: [groupMemberId])
  votes     ApprovalVote[]

  @@index([groupId])
  @@index([status])
  @@index([requestedBy])
  @@map("approvals")
}

model ApprovalVote {
  approvalId String   @map("approval_id") @db.Uuid
  adminId    String   @map("admin_id") @db.Uuid
  vote       String   @db.VarChar(10)
  votedAt    DateTime @default(now()) @map("voted_at") @db.Timestamp(6)

  // Relations
  approval Approval    @relation(fields: [approvalId], references: [approvalId], onDelete: Cascade)
  admin    GroupMember @relation(fields: [adminId], references: [groupMemberId])

  @@id([approvalId, adminId])
  @@index([adminId])
  @@map("approval_votes")
}

// ============================================================================
// AUDIT LOGGING & TRACKING
// ============================================================================

model AuditLog {
  logId            String   @id @default(uuid()) @map("log_id") @db.Uuid
  groupId          String   @map("group_id") @db.Uuid
  action           String   @db.VarChar(100)
  actionLocation   String?  @map("action_location") @db.VarChar(255)
  performedBy      String?  @map("performed_by") @db.Uuid
  performedByName  String?  @map("performed_by_name") @db.VarChar(255)
  performedByEmail String?  @map("performed_by_email") @db.VarChar(255)
  performedAt      DateTime @default(now()) @map("performed_at") @db.Timestamp(6)
  messageContent   String?  @map("message_content") @db.Text
  mediaLinks       String[] @map("media_links") @db.Text
  logData          Json?    @map("log_data") @db.JsonB

  // Relations
  group     Group        @relation(fields: [groupId], references: [groupId], onDelete: Cascade)
  performer GroupMember? @relation(fields: [performedBy], references: [groupMemberId])

  @@index([groupId])
  @@index([groupId, performedAt(sort: Desc)])
  @@index([performedBy])
  @@map("audit_logs")
}

model MediaLogLink {
  linkId        String   @id @default(uuid()) @map("link_id") @db.Uuid
  logExportId   String   @map("log_export_id") @db.Uuid
  mediaId       String   @map("media_id") @db.Uuid
  accessToken   String   @map("access_token") @db.VarChar(500)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  expiresAt     DateTime @map("expires_at") @db.Timestamp(6)
  accessedCount Int      @default(0) @map("accessed_count")

  // Relations
  media MessageMedia @relation(fields: [mediaId], references: [mediaId])

  @@index([logExportId])
  @@index([expiresAt])
  @@map("media_log_links")
}

model StorageUsage {
  usageId          String   @id @default(uuid()) @map("usage_id") @db.Uuid
  userId           String   @map("user_id") @db.Uuid
  groupId          String   @map("group_id") @db.Uuid
  mediaType        String   @map("media_type") @db.VarChar(20)
  fileCount        Int      @default(0) @map("file_count")
  totalBytes       BigInt   @default(0) @map("total_bytes")
  lastCalculatedAt DateTime @default(now()) @map("last_calculated_at") @db.Timestamp(6)

  // Relations
  user  User  @relation(fields: [userId], references: [userId], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [groupId], onDelete: Cascade)

  @@unique([userId, groupId, mediaType])
  @@index([userId])
  @@index([groupId])
  @@map("storage_usage")
}

model PinnedItem {
  pinId    String   @id @default(uuid()) @map("pin_id") @db.Uuid
  userId   String   @map("user_id") @db.Uuid
  itemType String   @map("item_type") @db.VarChar(50)
  itemId   String   @map("item_id") @db.Uuid
  pinnedAt DateTime @default(now()) @map("pinned_at") @db.Timestamp(6)
  pinOrder Int      @map("pin_order")

  // Relations
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, itemType, itemId])
  @@index([userId, itemType, pinOrder])
  @@map("pinned_items")
}
